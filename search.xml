<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[git多账号配置（Windows平台）]]></title>
    <url>%2F2017%2F08%2F21%2Fgit%E5%A4%9A%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Git的配置相信大家都不陌生了，如果还不熟悉，不要着急，继续往下看就好了。今天主要看一下多账户的场景，顺便也复习一下Git的配置流程。 什么情况下需要多账户的配置呢？1.在公司一般大家都会配置公司的代码仓库的账户，用的账号一般是公司企业邮箱账号,比如zhangsan@XXX.com,一般的配置流程都是企业入职的时候给一个配置清单或者新手指导，员工自己按照指导去配置，无非也就是用git的SSH 命令生成密钥对，然后将公钥上传至管理平台，就可以很开心的写Bug了，哦 不对，写码。但是某一天有这样一个场景，有时候自己也会写点代码，这些代码一般我们托管在GitHub等平台上，这个时候就无法使用公司的账号了，需要再配置一个GitHub的账号，比如zhangsan@Gmail.com这样的账户名字。2.由于天朝独特的网络环境,你们懂得，有时候GitHub无法连接或者不稳定，这个时候需要有一个国内的代码托管平台，国内比如码云这样的平台也可以托管代码，速度比较稳定。这个时候就需要同时配置GitHub和码云两个账户。 具体配置第一种情况 公司账户和GitHub账户（不同邮箱） 1.如果原来配置过一次，在用户目录下会有一个.ssh目录，里面存放着你默认第一次生成的秘钥对，id_rsa和id_rsa.pub,在此目录打开Git bash 输入命令 ssh-keygen -C &quot;zhangsan@Gmail.com&quot; -t rsa 然后回车 这个时候需要注意，需要给生成的秘钥对命名，比如id_rsa_github，不然会以默认的名字id_rsa生成，从而覆盖掉原来生成的。然后回车两次，就可以成功生成秘钥。2.生成秘钥成功后，把生成公钥上传到GitHub的秘钥管理平台上，然后最重要的步骤来了。回到用户目录的.ssh目录，创建一个config文本文件，注意这个文件名字为config，没有后缀名，尝试过加上.config后缀，貌似不会被识别。这个配置文件就是告诉ssh多个账户下，每个账户对应的秘钥位置和Host位置。config配置文件1234567891011# github Host github.comHostName github.comUser zhangsanIdentityFile ~/.ssh/id_rsa_github# companyHost code.company.comHostName code.company.comUser zhangsanIdentityFile ~/.ssh/id_rsa 这样配置就结束了，打开git bash 输入命令测试一下ssh -T git@github.com成功的话会收到这样一段回复Hi zhangsan! You&#39;ve successfully authenticated, but GitHub does not provide shell access.不成功的话，检查下上面的配置，或者使用ssh -vT git@github.com 查看下详细的错误信息。3.有些网友的帖子会说如果配置了全局的Git用户名和邮箱，需要去掉，其实不去掉也是可以的。如果你先设置了公司的账户为全局配置，那么你克隆GitHub上的代码到本地后，只要在那个目录设置本地的用户名和邮箱，就可以了，因为本地的优先级要大于全局的设定，公司的代码目录则继续使用全局配置，一样的互不影响。 第二种情况 GitHub和码云两个账号 1.不同邮箱如果你同时拥有GitHub和码云两个账号，而又不是使用同一邮箱注册，其实也类似于上面这张情况，分别生成不同邮箱的秘钥，然后再config文件里配置相应的用户、秘钥位置和Host就可以了。2.相同邮箱如果是相同的邮箱，就不需要上面的配置，只要用这个邮箱生成一次秘钥，这个秘钥可以同时用在两个网站上，两个远程仓库都可以提交，因为SSH秘钥是用邮箱生成的，邮箱相同，则秘钥也相同，所以可以共用一个。 参考http://www.jianshu.com/p/89cb26e5c3e8https://gist.github.com/suziewong/4378434http://noahsnail.com/2016/08/31/2016-9-1-Git%E5%A4%9A%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE/https://steflerjiang.github.io/2016/12/16/git%E5%A4%9A%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE/]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SonarQube 服务搭建与配置]]></title>
    <url>%2F2017%2F08%2F20%2Fsonar%E6%9C%AC%E5%9C%B0%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[SonarQube是神马 1.SonarQube（又叫Sonar）是对代码进行静态检测的开源平台,利用这个工具可以发现我们代码里各种隐藏的Bug和潜在的问 题，在团队协作的开发模式中可以更好的控制代码质量。 2.支持多种平台（Windows、Linux）和多种开发语言(java、C#、JavaScript、PHP等),并可以和Jekins、JIRA等多种外部工具和IntelliJ IDEA等开发工具无缝集成。 3.可视化界面，提供各种维度的质量查询和分析。 如何使用准备工作 下载软件SonarQube https://www.sonarqube.org/downloads/规则插件 checkstyle https://github.com/checkstyle/sonar-checkstylepmd https://github.com/SonarQubeCommunity/sonar-pmdfindbugs https://github.com/SonarQubeCommunity/sonar-findbugs汉化插件 sonar-l10n-zh-master https://github.com/SonarQubeCommunity/sonar-l10n-zh本地扫描插件 sonar-runner-dist-2.4 http://repo1.maven.org/maven2/org/codehaus/sonar/runner/sonar-runner-dist/2.4/以上插件均是源码 需要下载后自行编译 所需环境JDK1.7或以上MavenMysql 配置a.sonarqube\conf 配置sonar.properties内容 123sonar.jdbc.username=sonarsonar.jdbc.password=sonarsonar.jdbc.url=jdbc:mysql://127.0.0.1:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance b.mysql 配置 在mysql管理器中执行如下脚本创建数据库及mysql用户 12345CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci; CREATE USER 'sonar' IDENTIFIED BY 'sonar';GRANT ALL ON sonar.* TO 'sonar'@'%' IDENTIFIED BY 'sonar';GRANT ALL ON sonar.* TO 'sonar'@'localhost' IDENTIFIED BY 'sonar';FLUSH PRIVILEGES; mysql max_allowed_packet配置路径 C:\ProgramData\MySQL\MySQL Server 5.6\my.ini设置 max_allowed_packet=101943040 插件编译 安装分别编译下载的插件,去掉snapshort标记,放入插件目录下sonarqube-6.4\extensions\plugins 启动至此,启动mysql,启动sonarqube,本地访问 http://localhost:9000/可看到管理界面登录名\密码 admin\admin 扫描配置 maven扫描 配置maven配置文件添加节点 123456789101112131415161718&lt;profile&gt; &lt;id&gt;sonar&lt;/id&gt; &lt;activation&gt; &lt;activeByDefault&gt;true&lt;/activeByDefault&gt; &lt;/activation&gt; &lt;properties&gt; &lt;sonar.jdbc.url&gt;&lt;![CDATA[jdbc:mysql://127.0.0.1:3306/sonar]]&gt; &lt;/sonar.jdbc.url&gt; &lt;sonar.jdbc.driver&gt;com.mysql.jdbc.Driver&lt;/sonar.jdbc.driver&gt; &lt;sonar.jdbc.username&gt;sonar&lt;/sonar.jdbc.username&gt; &lt;sonar.jdbc.password&gt;sonar&lt;/sonar.jdbc.password&gt;&lt;sonar.jdbc.maxWait&gt;50000&lt;/sonar.jdbc.maxWait&gt;&lt;sonar.jdbc.minEvictableIdleTimeMillis&gt;600000&lt;/sonar.jdbc.minEvictableIdleTimeMillis&gt; &lt;sonar.jdbc.timeBetweenEvictionRunsMillis&gt;30000&lt;/sonar.jdbc.timeBetweenEvictionRunsMillis&gt; &lt;sonar.host.url&gt;http://localhost:9000&lt;/sonar.host.url&gt; &lt;/properties&gt;&lt;/profile&gt; 执行maven命令mvn sonar:sonar 可扫描项目并上传质量报告 sonar-runner 扫描配置a.环境变量配置系统环境变量 12SONAR_RUNNER_HOME D:\Java\sonar-runner-2.4Path 追加 ;%SONAR_RUNNER_HOME%\bin; b.sonar-runner.properties配置文件 12345678910111213141516171819202122232425262728#Configure here general information about the environment, such as SonarQube DB details for example#No information about specific project should appear here #----- Default SonarQube serversonar.host.url=http://localhost:9000 #----- PostgreSQL#sonar.jdbc.url=jdbc:postgresql://localhost/sonar #----- MySQLsonar.jdbc.url=jdbc:mysql://127.0.0.1:3306/sonar?useUnicode=true&amp;amp;characterEncoding=utf8 #----- Oracle#sonar.jdbc.url=jdbc:oracle:thin:@localhost/XE #----- Microsoft SQLServer#sonar.jdbc.url=jdbc:jtds:sqlserver://localhost/sonar;SelectMethod=Cursor #----- Global database settingssonar.jdbc.username=sonarsonar.jdbc.password=sonar #----- Default source code encodingsonar.sourceEncoding=UTF-8 #----- Security (when 'sonar.forceAuthentication' is set to 'true')sonar.login=adminsonar.password=admin c、本地项目配置文件 项目根目录sonar-project.properties配置文件 123456789101112sonar.projectKey=projectKey sonar.projectName=projectNamesonar.projectVersion=1.0# Set modules IDssonar.modules=projectmodules# Modules inherit properties set at parent levelsonar.sources=srcsonar.sourceEncoding=UTF-8sonar.language=javasonar.java.binaries=target# By default, the base directory for a module is &lt;current_dir&gt;/&lt;module_ID&gt;. 至此 使用命令行进入到项目根目录输入命令 sonar-runner 可以完成项目的扫描和上传报告 参考https://zhuanlan.zhihu.com/p/22926742http://blog.csdn.net/xiajian2010/article/details/22983825http://www.cnblogs.com/parryyang/p/6270402.html]]></content>
      <categories>
        <category>代码质量</category>
      </categories>
      <tags>
        <tag>SonarQube</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo+GitHub Pages博客搭建]]></title>
    <url>%2F2017%2F08%2F17%2Ffirstblog%2F</url>
    <content type="text"><![CDATA[闲扯一会由于要学习Java,最近读了不少书和博客,但是读下来发现了一些问题。比如，有些知识点看过很多次，每次看的时候都觉得似曾相识，却又记不起全貌。有些则是过目就忘，合上书本完全不记得书中所讲精要，甚是苦闷。这几日忽得夫人点拨，说是输出倒逼输出，意思就是充当别人的老师，然后逼自己学习更多的知识。这个道理大家自然都是懂得，只不过有时候做起来比较难以实践。一个是因为人都有惰性，好多事情都是停留在思想和嘴巴，付诸行动的少之又少。再者，也不太容易有机会充当别人的老师，而且本身我自己也不是那种好为人师的性格，倒不是清高装逼，也是怕误人子弟。不过我们这个行业比较特殊，可以有很好的方式去做输出倒逼输入的事情，比如写博客。其实很早就注册了博客园，但是到现在也只是酱油和灌水，没有发过帖子。现在决定写博客，把自己的输入真正变成自己的东西，一方面在写的过程中梳理一下知识，另一方面也记录下自己解决过的问题、踩过的坑。博客前期打算以Step By Step的教程为主，主要为了熟悉markdown语法和Hexo博客的使用，后面会慢慢转向原理解析类和日常踩坑记录类。往者不可谏,来者犹可追。 博客搭建GitHub Pages 设置 Github Pages 是 Github 公司提供的免费的静态网站托管服务，用起来方便而且功能强大，不仅没有空间限制，还可以绑定自己的域名。在 https://pages.github.com/ 首页上可以看到很多用 Github Pages 托管的网站，很漂亮。另外很多非常著名的公司和项目也都用这种方式来搭建网站，如微软和 twitter 的网站，还有 谷歌的 Material Design 图标 网站。本博客就是利用Github Pages托管所建。开始创建自己的网站： 创建一个新的仓库 yourname.github.io，yourname 就是你github的用户名，不可以是其他字符，不然访问不到。 只要把静态的网站文件上传到这个仓库，然后访问https://yourname.github.io，就可以看到自己的网站了。 安装Hexo Hexo出自台湾大学生tommy351之手，是一个基于Node.js的静态博客程序，其编译上百篇文字只需要几秒。hexo生成的静态网页可以直接放到GitHub Pages，BAE，SAE等平台上。 所需环境 Nodejs Git 1.首先安装好Nodejs和Git,Hexo安装过程中，有些文件是通过Git下载下来。安装cnpm 由于天朝网路环境问题，所以最好安装cnpm 淘宝的镜像，下载比较快npm install -g cnpm --registry=https://registry.npm.taobao.org全局安装hexocnpm install hexo-cli -g新建一个hexo/blog文件夹进入到你的hexo/blog目录打开git bashcnpm install hexo --save检查是否安装成功hexo -v初始化Hexohexo init这里会创建一些文件然后输入cnpm install这里要等一会，安装组件 2.然后就可以使用了常用命令hexo new &quot;Hello World&quot; 创建新页面hexo generate 重新生成所有页面hexo server 启动本地预览 预览地址 http://localhost:4000 会看到一个默认主题的hexo网站。 hexo new 命令会创建一个md格式的文件，就是我们写博客的文件，推荐使用markdownpad来写，支持各种markdown格式， 其实在使用过程中无需使用此命令创建，只要在blog下的\source\_posts文件夹下直接新建md格式的文件就可以了。Hexo在生成博客的时候回自动识别这个目录下写所有md文件。 3.发布到GitHub 找到blog目录下的_config.yml文件，加入以下节点123type: gitrepo: github: &lt;repository url&gt;,[branch] 执行命令hexo d 就可以完成发布，发布成功后，就可以在https://yourname.github.io看到自己更新的内容了，由于CDN缓存的缘故，有时候更新后要过一会才可以看到最新的内容。 参考地址 https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/ http://gitbeijing.com/pages.html http://www.jianshu.com/p/b8dd1e3e0255]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
